events {
    worker_connections 1024;
}

http {
    # Increase map hash bucket size for long token strings
    map_hash_bucket_size 128;

    # Token validation using map
    map $http_authorization $auth_status {
        default "invalid";
        "Bearer ${MCP_AUTH_TOKEN}" "valid";
        "" "missing";  # No token provided
    }

    # Upstream definitions
    upstream mcp_server {
        server graphiti-mcp:8000;
    }

    server {
        listen 80;
        server_name _;

        # Health check endpoint (no auth required)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # All routes proxy to MCP server with token authentication
        # Neo4j is accessed directly on port 7474 with its own Basic Auth
        location / {
            # Token validation
            if ($auth_status = "invalid") {
                return 401 '{"error": "Invalid token"}';
            }
            if ($auth_status = "missing") {
                return 401 '{"error": "Missing Authorization header"}';
            }

            # Proxy settings for MCP (SSE and HTTP)
            proxy_pass http://mcp_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection '';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSE-specific settings
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            chunked_transfer_encoding on;

            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Cache-Control' 'no-cache' always;
        }
    }
}
