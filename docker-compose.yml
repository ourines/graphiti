services:
  neo4j:
    image: neo4j:5.26.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:7474:7474"  # Web UI - 仅本地访问
      - "127.0.0.1:7687:7687"  # Bolt - 仅本地访问
    volumes:
      - neo4j_prod_data:/data
      - neo4j_prod_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=2G
      - NEO4J_server_memory_pagecache_size=1G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    networks:
      - graphiti-network

  graphiti-api:
    build:
      context: .
      dockerfile: server/Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"  # 公开访问（需要认证保护）
    environment:
      # LLM Provider: gemini, openai, anthropic, groq
      - LLM_PROVIDER=${LLM_PROVIDER:-gemini}

      # Gemini 配置（默认）
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MODEL_NAME=${MODEL_NAME:-gemini-2.5-flash}  # Gemini 模型
      - EMBEDDER_MODEL_NAME=${EMBEDDER_MODEL_NAME:-gemini-embedding-001}  # Gemini Embedding 模型
      - MAX_TOKENS=${MAX_TOKENS:-64000}  # 最大 token（防止截断）

      # OpenAI 配置（可选，Anthropic/Groq 需要用于 embedding）
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - EMBEDDING_MODEL_NAME=${EMBEDDING_MODEL_NAME}  # OpenAI embedding（Anthropic/Groq 需要）

      # Anthropic 配置（可选）
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

      # Groq 配置（可选）
      - GROQ_API_KEY=${GROQ_API_KEY}

      # Neo4j 配置
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}

      # API 认证（可选，留空则不启用认证）
      - GRAPHITI_API_TOKEN=${GRAPHITI_API_TOKEN}
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - graphiti-network

  mcp-http-server:
    build:
      context: .
      dockerfile: mcp-http-server/Dockerfile
    restart: unless-stopped
    ports:
      - "3100:3100"
    environment:
      - GRAPHITI_API_URL=http://graphiti-api:8000
      - MCP_PORT=3100
      # 认证设置：默认要求客户端提供token（推荐用于公网部署）
      # 设置为 'false' 可禁用认证（仅用于本地开发）
      - MCP_REQUIRE_AUTH=${MCP_REQUIRE_AUTH:-true}
    depends_on:
      graphiti-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3100/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - graphiti-network

volumes:
  neo4j_prod_data:
    driver: local
  neo4j_prod_logs:
    driver: local

networks:
  graphiti-network:
    driver: bridge
