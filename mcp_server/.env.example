# Graphiti MCP Server Environment Configuration

# =============================================================================
# Neo4j Database Configuration
# =============================================================================
# IMPORTANT: Use service name 'neo4j' for Docker Compose deployments
# Use 'localhost' only if connecting to Neo4j running on the host machine

# For Docker Compose (default):
NEO4J_URI=bolt://neo4j:7687

# For local development (Neo4j on host):
# NEO4J_URI=bolt://localhost:7687

# Neo4j credentials (can be customized)
# IMPORTANT: To change Neo4j credentials:
#   1. Stop services: docker compose down
#   2. Remove data volume: docker volume rm mcp_server_neo4j_data
#   3. Update NEO4J_USER and NEO4J_PASSWORD in .env file
#   4. Start services: docker compose up -d
# Note: Neo4j initializes credentials only on first startup with empty data volume
NEO4J_USER=neo4j
NEO4J_PASSWORD=demodemo

# =============================================================================
# LLM Provider Configuration (choose one provider)
# =============================================================================

# Option 1: OpenAI API Configuration
# OPENAI_API_KEY=your_openai_api_key_here
# MODEL_NAME=gpt-4.1-mini
# Optional: Maximum output tokens (default: 8192)
# MAX_TOKENS=8192
# Optional: Only needed for non-standard OpenAI endpoints
# OPENAI_BASE_URL=https://api.openai.com/v1

# Option 2: Google Gemini API Configuration
GOOGLE_API_KEY=your_google_api_key_here
MODEL_NAME=gemini-2.5-flash
EMBEDDER_MODEL_NAME=text-embedding-004
# Optional: Maximum output tokens (default: model-specific, e.g., 65536 for gemini-2.5-flash)
# Increase this if you encounter "Unterminated string" JSON parsing errors
# MAX_TOKENS=65536

# Option 3: Azure OpenAI Configuration
# AZURE_OPENAI_ENDPOINT=your_azure_openai_endpoint_here
# AZURE_OPENAI_API_VERSION=2025-01-01-preview
# AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-gpt-4o-mini-deployment
# AZURE_OPENAI_EMBEDDING_API_VERSION=2023-05-15
# AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME=text-embedding-3-large-deployment
# AZURE_OPENAI_USE_MANAGED_IDENTITY=false

# =============================================================================
# S3-Compatible Storage Configuration (for Neo4j backups)
# =============================================================================
# Enable automatic backups by uncommenting these variables
# To activate backup service: docker compose --profile backup up -d

# AWS/S3 Credentials (required for backup service)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_DEFAULT_REGION=us-east-1

# S3 bucket name for backups (required for backup service)
# S3_BACKUP_BUCKET=your-backup-bucket

# Path prefix in bucket (optional, default: graphiti-backups)
# S3_BACKUP_PATH=graphiti-backups

# For S3-compatible services (Cloudflare R2, MinIO, etc.)
# AWS_ENDPOINT_URL=https://your-s3-endpoint.com

# Backup schedule in cron format (optional, default: 0 2 * * * = daily at 2 AM UTC)
# BACKUP_CRON=0 2 * * *

# Backup retention in days (optional, default: 7)
# BACKUP_RETENTION_DAYS=7

# Timezone for backup scheduling (optional, default: UTC)
# TZ=UTC

# Manual Backup and Restore Commands:
# Backup: docker compose run --rm backup /usr/local/bin/backup.sh
# Restore: docker compose run --rm backup /usr/local/bin/restore.sh <backup_filename>
# List backups: aws s3 ls s3://your-bucket/graphiti-backups/ --endpoint-url=your-endpoint

# =============================================================================
# Nginx Authentication Configuration
# =============================================================================
# Token-based authentication for MCP and Neo4j access through Nginx
# Generate a secure random token using: openssl rand -base64 32
# Example: MCP_AUTH_TOKEN=your-secret-token-here
MCP_AUTH_TOKEN=change-me-to-a-secure-random-token

# =============================================================================
# Optional Configuration
# =============================================================================

# Optional: Group ID for namespacing graph data
# GROUP_ID=my_project

# Optional: Path configuration for Docker
# PATH=/root/.local/bin:${PATH}

# Optional: Memory settings for Neo4j (used in Docker Compose)
# NEO4J_server_memory_heap_initial__size=512m
# NEO4J_server_memory_heap_max__size=1G
# NEO4J_server_memory_pagecache_size=512m

# Optional: Concurrency limit for Graphiti operations
# SEMAPHORE_LIMIT=10
